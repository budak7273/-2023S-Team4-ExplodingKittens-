plugins {
    id 'java'
    id "eclipse"
    id "com.github.spotbugs" version "4.2.3"
    id 'checkstyle'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.7.4'
}

group 'org.rosehulman.csse376.team3'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.easymock/easymock
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0', 'org.easymock:easymock:3.1'
    testCompileOnly 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    implementation 'javazoom:jlayer:1.0.1'
}

test {
    useJUnitPlatform()
}

[spotbugsMain, spotbugsTest].each { task ->
    task.configure {
        reports {
            html {
                enabled = true
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }
}

pitest {
    targetClasses = ['system.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    junit5PluginVersion = '0.12'
    verbose = true
}

jacoco {
    toolVersion = "0.7.5.+"
}

jacocoTestReport {
    dependsOn test
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

test.finalizedBy(jacocoTestReport)

task codeCoverageInfo (dependsOn: jacocoTestReport) {
    ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
    doLast {
        println "Transforming source file."

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://xml.org/sax/features/namespaces", false)

        def reportNode = parser.parse(srcFile)
        reportNode.children().each {
            if(it.name() == 'counter') {
                String type = it.@type
                float missed = it.@missed as float
                float covered = it.@covered as float
                float percentage = covered / (missed + covered) * 100
                println "Code Coverage[$type]: $percentage%"
            }
        }
    }
}
jacocoTestReport.finalizedBy(codeCoverageInfo)